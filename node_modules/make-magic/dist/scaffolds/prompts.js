"use strict";var PublishableApiKeyPrompt,SecretApiKeyPrompt,NpmClientPrompt,SocialLoginsPrompt;Object.defineProperty(exports,"__esModule",{value:!0}),exports.SocialLoginsPrompt=exports.NpmClientPrompt=exports.SecretApiKeyPrompt=exports.PublishableApiKeyPrompt=void 0,function(e){const t=e=>!!e.startsWith("pk")||"--publishable-api-key should look like `pk_live_...` or `pk_test_...`";e.questions={type:"input",name:"publishableApiKey",validate:t,message:"Enter your Magic publishable API key:"},e.flags={publishableApiKey:{type:String,validate:t,description:"The Magic publishable API key for your app."}}}(PublishableApiKeyPrompt=exports.PublishableApiKeyPrompt||(exports.PublishableApiKeyPrompt={})),function(e){const t=e=>!!e.startsWith("sk")||"--secret-api-key should look like `sk_live_...` or `sk_test_...`";e.questions={type:"input",name:"secretApiKey",validate:t,message:"Enter your Magic secret API key:"},e.flags={secretApiKey:{type:String,validate:t,description:"The Magic secret API key for your app."}}}(SecretApiKeyPrompt=exports.SecretApiKeyPrompt||(exports.SecretApiKeyPrompt={})),function(e){const t=["npm","yarn"];e.questions={type:"select",name:"npmClient",message:"Choose an NPM client:",choices:t},e.flags={npmClient:{type:String,validate:e=>!!t.includes(e)||`\`${e}\` is not a valid NPM client.`,description:"The NPM client of your choice. (one of: npm, yarn)"}},e.getInstallCommand=function(e){return"npm"===e.npmClient?["npm","install"]:["yarn","install"]},e.getStartCommand=function(e){return t=>"npm"===t.npmClient?["npm","run",e]:["yarn",e]}}(NpmClientPrompt=exports.NpmClientPrompt||(exports.NpmClientPrompt={})),function(e){e.providers=["apple","bitbucket","discord","facebook","github","gitlab","google","linkedin","twitter","twitch","microsoft"],e.questions={type:"multiselect",name:"socialLogin",message:"Choose your social login providers:",choices:e.providers,validate:e=>!!e.length||"Please select at least one social login provider."},e.flags={socialLogin:{type:[String],description:`The social login provider(s) of your choice. You can provide this flag multiple times to select multiple providers. (one of: ${e.providers.join(", ")})`,validate:t=>{const i=[];if(t.forEach((t=>{e.providers.includes(t)||i.push(t)})),i.length)return`Received incompatible social login provider(s): (${i.join(", ")})`}}}}(SocialLoginsPrompt=exports.SocialLoginsPrompt||(exports.SocialLoginsPrompt={}));