"use strict";var __awaiter=this&&this.__awaiter||function(t,e,r,o){return new(r||(r=Promise))((function(n,i){function a(t){try{u(o.next(t))}catch(t){i(t)}}function p(t){try{u(o.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,p)}u((o=o.apply(t,e||[])).next())}))},__importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.downloadAndExtractRepo=exports.getRepoInfo=void 0;const got_1=__importDefault(require("../../compiled/got")),tar_1=__importDefault(require("../../compiled/tar")),stream_1=require("stream"),util_1=require("util"),path_1=__importDefault(require("path")),pipeline=util_1.promisify(stream_1.Stream.pipeline);function getRepoInfo(t,e){return __awaiter(this,void 0,void 0,(function*(){const[,r,o,n,i,...a]=t.pathname.split("/"),p=e?e.replace(/^\//,""):a.join("/"),u=e?`${i}/${a.join("/")}`.replace(new RegExp(`/${p}|/$`),""):i;if(r&&o&&u&&"tree"===n)return{username:r,name:o,branch:u,filePath:p.split(path_1.default.sep).join("/")}}))}function downloadAndExtractRepo(t,{username:e,name:r,branch:o,filePath:n}){return pipeline(got_1.default.stream(`https://codeload.github.com/${e}/${r}/tar.gz/${o}`),tar_1.default.extract({cwd:t,strip:n?n.split("/").length+1:1},[`${r}-${o}${n?`/${n}`:""}`]))}exports.getRepoInfo=getRepoInfo,exports.downloadAndExtractRepo=downloadAndExtractRepo;